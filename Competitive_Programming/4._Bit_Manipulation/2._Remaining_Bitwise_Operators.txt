Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-06-28T23:40:53+05:30

====== 2. Remaining Bitwise Operators ======
Created Sunday 28 June 2020

* **Bitwise ops: **The operators which perform the logical gate operations on corresponding bits of two variables. 
__Note:__ 
1. These are different from &&, || and ! which are meant for booleans only.
2. All 4 ops are commutative, associative and distributive.

Types of gate bitwise ops:
1. AND ⇒ &
	{{./pasted_image005.png}} {{./pasted_image001.png}} 
* Uses: 
	a. Turn off bit
{{{code: lang="cpp" linenumbers="True"
x & 0 == 0; //true for any number
// e.g 110 , turn off second bit
// 110 & 101
}}}

	b. Check if bit is set/unset, inter-alia check if even or odd(no shifts required)
{{{code: lang="cpp" linenumbers="True"
x & 1 = x; // check if a bit is set/unset
}}}

2. OR ⇒ |
	{{./pasted_image002.png}} {{./pasted_image004.png}}
* Use: 
	a. Set bit(s)
{{{code: lang="cpp" linenumbers="True"
 x | 0 == x; // true
 // 1010, turn on bit 1
 // 101 | 0100 = 1110
}}}
	
	b. Check if bit is set/unset
{{{code: lang="cpp" linenumbers="True"
x | 0 = x; // x is a bit
}}}

3. NOT ⇒ ~ ⇒ unary operator
	{{./pasted_image007.png}}
* Use: 
	a. Unset bit(s)
	b. Produce all 1's
{{{code: lang="cpp" linenumbers="True"
~0;// 11111111... useful
0; // 0000.. obvious
}}}
		
* Interesting and useful fact:
{{{code: lang="cpp" linenumbers="True"
~x == -(x+1); // follows from the definition of 2's complement, given x is an integer
}}}

4. XOR ⇒ ^ (The most useful)
	{{./pasted_image008.png}}
* Use
	a. Check if two bits are equal
{{{code: lang="cpp" linenumbers="True"
x ^ x == 0; // works for only two numbers(or even numbers)
}}}

	b. Works as binary switch for any bit
{{{code: lang="cpp" linenumbers="True"
x ^ 1 = ~x; // same as ~x
}}}
		
--------------------
1. **Predict The Output**
{{{code: lang="cpp" linenumbers="True"
#include<iostream>
using namespace std;

int main(){
	if(~0 == 1) {
		cout << "yes";
	}
	else {
		cout << "no";
	}
}
}}}

A. yes
B. no 
C. Compile time error
D. Undefined
Answer: B. ~0 = -(0+1) = -1 and not 1. Bitwise. not !

2. **Predict The Output**
{{{code: lang="cpp" linenumbers="True"
#include <iostream>
using namespace std;

int main(){
    int y = 0;
    if(1 | (y = 1)) {
        cout << "y is " << y;
    }
    else {
        cout << y;
    }
}
}}}

A. y is 0
B. y is 1
C. 1
D. 0
Answer: B. Because in C++ an assigment has a value equal to the rvalue. So y==1 is the same as 1. This is allowed only in low level languages.

3. **Predict The Output**
#include <iostream>
using namespace std;

int main(){
	int y = 1;
	if(y & (y = 2)) {
		cout << "true";
	}
	else {
		cout << "false";
	}
}
Answer: true
{{./pasted_image.png?width=400}}
Reason: 32 is the answer in the assigment because no buffer is created.
in 2 & 3 ⇒ 2 and 3 both have different buffer variables.
in (y=2) & (y=3) ⇒ there are no buffer variables created, this is how assignment operator works. So is is like 3 & 3. 
in  (y=3) & (y=2) ⇒ 2 & 2
